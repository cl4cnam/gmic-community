#@gmic

#@gui _<b>Testing</b>

#@gui Zonderr

# filter seen at 08:30 of that video : http://video.google.com/videoplay?docid=4987800426162658721
#@gui Demo Mathmap XY: demo_xy, demo_xy
#@gui : note = note("mathmap xy: demo")
#@gui : sep = separator()
#@gui : X Scale = float(1,0,10)
#@gui : Y Scale = float(1,0,10)
demo_xy:
  mathmap_xy "xmath*$1","ymath*$2"

#@gui Demo Mathmap RA: demo_ra, demo_ra
#@gui : note = note("mathmap ra: demo")
#@gui : sep = separator()
#@gui : Radius Scale = float(1,0,10)
#@gui : Angle Scale = float(1,0,10)
demo_ra:
  mathmap_ra "rmath*$1","amath*$2"

#@gui Mathmap Flag: mathmap_flag, mathmap_flag
#@gui : Amp = float(0.05,0,1)
#@gui : Len = float(5,0,50)
#@gui : Speed = int(1,1,5)
#@gui : Time = float(5,0,50)
mathmap_flag:
  mathmap_xy "xmath","ymath+$1*sin(pi*$2/1*(-xmath+$4*2*$3/$2))"

#@gui Rel2ellv3: mathmap_rel2ellv3,mathmap_rel2ellv3
mathmap_rel2ellv3:
  mathmap_xy "xmath/sqrt(1-4*(ymath/H)*(ymath/H))","ymath/sqrt(1-4*(xmath/W)*(xmath/W))"

#@gui Spiral: mathmap_spiral, mathmap_spiral
#@gui : Rotations = float(5,0,20)
#@gui : Time = float(0,0,1)
mathmap_spiral:
  q="sin(rmath*$1*pi*2-amath+$2*2*pi)*0.5+0.5"
  mathmap_grayColor $q

###########################

mathmap_xy:
  e[^-1] "mathmap xy: fonction with formulas : "$1" and "$2"."
  repeat $! l[$>]
  {w},{h},1,1 [-1] rv
  f[0] "H=2*h/max(w,h);W=2*w/max(w,h);x0=(w-1)/2+1e-10; y0=(h-1)/2; xmath=(x-x0)*W/w;  ymath=-(y-y0)*H/h; ($1)*w/W+x0"
  f[1] "H=2*h/max(w,h);W=2*w/max(w,h);x0=(w-1)/2+1e-10; y0=(h-1)/2; xmath=(x-x0)*W/w;  ymath=-(y-y0)*H/h; -($2)*h/H+y0"
  a[0,1] c
  warp[-1] [0],0,1,0
  k[-1]
  done done

mathmap_ra:
  e[^-1] "mathmap ra: fonction with formulas : "$1" and "$2"."
  repeat $! l[$>]
    {w},{h},1,1 [-1] rv
    f[0] "x0=(w-1)/2+1e-10; y0=(h-1)/2; rmath=((x-x0)^2+(y-y0)^2)^0.5*2/w; amath=(atan(-(y-y0)/(x-x0))+pi/2*(sign(x-x0)-1))%(2*pi); x0+($1)*x0*cos($2)"
    f[1] "x0=(w-1)/2+1e-10; y0=(h-1)/2; rmath=((x-x0)^2+(y-y0)^2)^0.5*2/w; amath=(atan(-(y-y0)/(x-x0))+pi/2*(sign(x-x0)-1))%(2*pi); y0-($1)*x0*sin($2)"
    a[0,1] c
    warp[-1] [0],0,1,0
    k[-1]
  done done

mathmap_grayColor:
  e[^-1] "mathmap grayColor: fonction with formulas : "$1"."
  repeat $! l[$>]
    r 100%,100%,1,1
    f "H=2*h/max(w,h);W=2*w/max(w,h);x0=(w-1)/2+1e-10; y0=(h-1)/2; rmath=((x-x0)^2+(y-y0)^2)^0.5*2/w; amath=(atan(-(y-y0)/(x-x0))+pi/2*(sign(x-x0)-1))%(2*pi); ($1)"
    n 0,255 to_rgba
  done done

#@gui Fourier Picture Watermark : fx_fourier_picture_watermark, _none_
#@gui : Relative Size = float(0.2,0.1,0.5)
#@gui : sep = separator()
#@gui : note = note("Note : To make the watermark visible afterwards, use the 'Fourier Analysis' filter. ")
fx_fourier_picture_watermark :
  rr2d[0] {1,w*$1},{1,h*$1} to_gray[0] threshold[0] 127
  watermark_fourier2 c 0,255

#@cli watermark_fourier2 :
watermark_fourier2 :
  fft[-1] shift[-2,-1] {int(w/2)},{int(h/2)},0,0,2
  [0],[0],1,{s}
  j[-3,-2] [-1],3,3,0,0,1,[0]
  mirror[0] x
  j[-3,-2] [-1],{{-2,w}-2-{0,w}},3,0,0,1,[0]
  mirror[0] y
  j[-3,-2] [-1],{{-2,w}-2-{0,w}},{{-2,h}-2-{0,h}},0,0,1,[0]
  mirror[0] x
  j[-3,-2] [-1],3,{{-2,h}-2-{0,h}},0,0,1,[0]
  mirror[0] y
  rm[-1] shift[-2,-1] -{int(w/2)},-{int(h/2)},0,0,2 ifft[-2,-1] rm[-1]
  mv[-1] 1
  rm[0]

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
