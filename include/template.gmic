#@gmic
#--------------------------------------------------------------------
#
# This file illustrates how to set up an external filter source
# for the G'MIC plug-in for GIMP.
# It contains toy filters in various locations to show how things are
# working. This should be a good basis for your own filters.
#
#---------------------------------------------------------------------
# ^ Remove this header for final filter sources ! ^
# ^ But keep the first line '#@gmic' (mandatory), it identifies the file
# as an external filter source ^

#----------------------------------------------------------------------
#
#  File        : template.gmic   <-- Put your filename here.
#                ( G'MIC commands file )
#
#  Description : A template file for external filter sources.
#
#
#  Copyright   : John Doe
#                ( http://en.wikipedia.org/wiki/John_Doe/ )
#
#  License     : CeCILL v2.0
#                ( http://cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#
#------------------------------------------------------------------------------
# ^ This is a regular header. Of course you can change the License with a more
# or less restrictive rules (non-commercial for instance).

#------ Syntax rules for a G'MIC command file :
#
#*** General syntax :
#
# - Each line starting with 'command_name :' starts a new definition of the G'MIC custom command 'command_name'.
# - Each line starting with '#' is a comment line.
# - Any other line is considered as the continuation of a previously started G'MIC custom command.
#
#*** Specific rules for the command-line interface 'gmic':
#
# - A comment line starting with '#@cli' will be parsed by 'gmic' to display help for
#    G'MIC custom commands (when invoked with option 'h'). More precisely :
#
#      _ '#@cli :: subsection' defines a new command subsection in the displayed help.
#      _ '#@cli command_name : arguments_format1 : arguments_format2 : ... : (qualifier)'
#        starts a new command description.
#      _ '#@cli : description' add a new description line to the current command description.
#
#*** Specific rules for the universal plug-in :
#
# - A comment line starting with '#@gui' will be parsed by the plug-in to define the filters tree.
# - A comment line starting with '#@gui_xx' will define a filter only for a specific language 'xx'
#    (e.g. 'en','fr'...).
# - A comment line starting with '#@gui_xx hide(/Filter or folder name)' will hide the existing
#    filter of folder for the locale 'xx'.
# - More precisely, the syntax of a '#@gui' comment line is :
#
#    '#@gui Folder name'
#
# or
#
#    '#@gui Command name : command, preview_command, parameter = typedef, parameter2 = typedef'
#    '#@gui : parameter3 = typedef, parameter4 = typedef ...., parameterN = typedef'
#
#   where :
#
#      'command' is the G'MIC command name called to process the image.
#
#      'preview_command' is the G'MIC command name called to process the preview.
#
#           Note that you can optionally specify a float-valued factor>=0 between parentheses at the end of
#           the 'preview_command' to force the default zoom factor used by the preview for this filter.
#           Use (0) for a 1:1 preview, (1) for previewing the whole image, (2) for 1/2 image and so on...
#           You can also put an additional '+' sign after the parenthesis to specify the rendered preview
#           is still accurate for different zoom factors.
#
#      'parameter = typedef' tells about the names, types and default values of the filter parameters.
#
#           'typedef' can be :
#
#      _ 'bool(default_value={ 0 | 1 | false | true })':
#          Add a boolean parameter (0 or 1) (as a checkbutton).
#
#      _ 'button(_alignment)':
#          Add a boolean parameter (0 or 1) (as a button).
#
#      _ 'choice(_default_index,Choice0,..,ChoiceN)':
#          Add a integer parameter (as a combobox).
#
#      _ 'color(R,_G,_B,_A)':
#          Add R,G,B[,A] parameters (as a colorchooser).
#
#      _ 'point(_X,_Y,_removable={ -1 | 0 | 1 },_burst={ 0 | 1 },_R,_G,_B,_[-]A,_radius%)':
#          Add X,Y parameters (as a moveable point over the preview).
#
#      _ 'value(value)':
#          Add a pre-defined value parameter (not displayed).
#
#      _ 'file[_in,_out](_default_filename)':
#          Add a filename parameter (as a filechooser).
#
#      _ 'float(default_value,min_value,max_value)':
#          Add a float-valued parameter (as a float slider).
#
#      _ 'folder(_default_foldername)':
#          Add a foldername parameter (as a folderchooser).
#
#      _ 'int(default_value,min_value,max_value)':
#          Add a integer parameter (as an integer slider).
#
#      _ 'link(_alignment,_label,URL)':
#          Display a URL (do not add a parameter).
#
#      _ 'note(_label)':
#          Display a label (do not add a parameter).
#
#      _ 'text(_is_multiline={ 0 | 1 },_default text)':
#          Add a single or multi-line text parameter (as a text entry).
#
#      _ 'separator()':
#          Display an horizontal separator (do not add a parameter).
#
#   Type separators '()' can be replaced by '[]' or '{}' if necessary (for instance if parentheses are required in
#   an argument of the typedef, e.g in a text). You can also replace 'typedef' by '_typedef' to tell the plug-in not
#   to update the image preview when the corresponding parameter is modified.
#   After the closing separator, you may specify a 'visibility state' character for the parameter, which can be
#   { _0: Hidden | _1: Grayed-out | _2: Visible (default) }, opt. followed by a propagation character that tells
#   if this visibility state must be propagated to neighboring non-valued interface widgets
#   (s.a. separator(), link() or note()).
#   This propagation character can be:
#   { '+'=propagate forward | '-'=propagate backward | '*'=propagate in both directions }.
#
#   Use '_none_' as a special command or preview_command to tell the plug-in that the entry requires no G'MIC call.
#
#   A G'MIC command can set new values for each filter parameter, through the status (see command 'status').
#   To do so, the returned status must follow the syntax :
#   '{params1}{params2}{..}{paramsN}' where N must be exactly equal to the number of parameters
#   for the current filter. Optionnally, you can append to each {param} its visibility state suffix ( e.g: {param}_1 ).
#
#   A G'MIC command can also specify the output blending mode, the opacity and the position of each of the output image
#   (i.e. layer in the plug-in). To do so, set the image name to something like:
#   'mode(grainmerge),opacity(50),pos(30,50),name(name)'.
#
#     - Blending mode name should be the same as the argument of the 'blend' command.
#     - Opacity is a float number in [0,100].
#     - X and Y positions are integers.
#     - 'name' is the layer name.
#
#-----------------------------------------------------------------------------------------------------------------------

# The filters defined below will go into the folder 'Testing/John Doe/'. This is a good 'standard' location
# for putting filters that are still in testing mode (of course, 'John Doe' should be replaced by your name !).
# Once considered as stable, such filters can be then moved out of 'Testing', to one of the existing 'stable' folder
# (e.g. 'Artistic' or 'Enhancement', or put in a new folder name if no one correspond to the topic of the filters.

#------------------------------------
#@gui <b>Testing</b>
#@gui <i>John Doe</i>
#------------------------------------

#@gui About : _none_, jdoe_about
#@gui : note = note{"
#@gui : <span foreground="purple">( <b>J</b>ohn Doe's <b>F</b>ilter <b>S</b>et for <b>G'MIC</b>)</span>\n\nis proposed to you by"}
#@gui : note = link("John Doe","http://en.wikipedia.org/wiki/John_Doe/")
#@gui : note = link{"( Affiliation )","http://www.affiliation_url.org"}
#@gui : note = note{"\n"}
#@gui : sep = separator()
#@gui : note = note{"
#@gui : The source code of this set of filters is available at :"}
#@gui : note = link("http://www.filters_url.org/template.gmic")
#@gui : "}
#@gui : sep = separator()
jdoe_about :
  gui_no_preview

# ^ Please name your G'MIC commands with a 'username' as a prefix, so it avoids name conflicts with other filter sources !

#@gui Toy filter : jdoe_toyfilter, jdoe_toyfilter_preview(0)
#@gui : Smoothness = float(0,0,10)
#@gui : Mirror = choice("X","Y","XY")
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author : <i>First_name Last_name</i>.      Latest update: <i>2010/29/12</i>.</small>")
jdoe_toyfilter :
  foreach  # A typical loop to work on each layer separately.
    blur $1
    if $2==0 mirror x
    elif $2==1 mirror y
    else mirror xy
    fi
  done

jdoe_toyfilter_preview :
  gui_split_preview "jdoe_toyfilter ${1-2}",${-3--1}

#@gui __
# ^ The line above allows to goes 2 levels up, so it exits from the 'Testing / John Doe' folder.
# After this line, you are located in the root path of the filter tree.
#----------------------------------------------------------------------------------------
# The filters below will go into the folder 'Various/' .
# Put filters in regular locations only when you are sure that everything is working well,
# as many users will possibly experience your filter !

#------------------------------------
#@gui <b>Various</b>
#------------------------------------
#@gui Extr'artistic : jdoe_xtrartistic, jdoe_xtrartistic_preview(1)
#@gui : Smoothness = float(10,0,30)
#@gui : Sharpness = float(100,0,500)
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author : <i>First_name Last_name</i>.      Latest update: <i>2010/29/12</i>.</small>")
jdoe_xtrartistic :
  blur $1 sharpen {100*$2}

jdoe_xtrartistic_preview :
  gui_split_preview "jdoe_xtrartistic ${1-2}",${-3--1}

#@gui _
# ^ The line above allows to goes 1 level up, so exit the 'Various' folder.
# Now, you are located in the root path of the filter tree.
# .... You get the idea ....

# A last important note : to be able to test your external filter source, copy it as
# '$HOME/.gmic' (for Unix-like OS) or '%APPDATA%/user.gmic' (for Windows-like OS), and it
# will be considered as 'local' external source by the plug-in. Once everything is working
# fine, you can now contribute and ask us to become an official external filter source !
# Thanks for your participation.
# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
