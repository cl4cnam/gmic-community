# repeat … done
%% x "mkdir -p img" %%
%% ../listmanip/images/ampersand.svg -to_rgb. f. 'c==0?255*(1-(i/255)):0' b. 3,1,0 expand_x {w/2} 100%,100%,100%,100% a[-2,-1] y +store[0] ampersand nm. accumulator repeat {360/6} k={6*($>+1)} i[0] $ampersand nm[0] ampersand rotate[ampersand] {$k},2,1,50%,50% n[ampersand] 0,255 f[ampersand] 'wv=vector3(1/sqrt(3));rot(wv,($k)°)*I' c[ampersand] 0,255 -blend[ampersand,accumulator] negation,0.985 nm. accumulator n[accumulator] 0,255 -done -r2dx. 50%,5 -o. img/ampercd.png rm 0 %%

|![ampersandcd](img/ampercd.png)|The `-repeat` _<repeat block>_ `-done` commands form a syntactical unit that together define a _repeat block_ of zero or more commands. `-repeat` takes a [mathematical expression](https://gmic.eu/reference/mathematical_expressions.html#top) parameter that typically reduces to a repetition count, setting the number of times that the repeat block executes.\n\nThe parameter may resolve to any integer value, but the repeat block never executes when such is non-positive, an implicit conditional test.\n\n`-repeat` may take a second, optional string parameter that establishes an alias for the `$>` substitution (the current incrementing loop count). The alias, prefixed with `$`, could reference the current incrementing loop count with a more meaningful name than `$>`.

The ''-break'' command exits `-repeat … -done` blocks before the count completes. Usually one embeds the `-break` command in an ''-if'' … ''-endif'' conditional block.

Similarly, a ''-continue'' command within `-repeat … -done` blocks restarts script flow at the beginning of the repeat block, incrementing the loop count as if the repeat block fully executed.
= examples
## Examples
|-1.    |`-repeat 5 count=$>` \n `    -echo "The count is "$count"."` \n `-done`|Count to four from zero.
| 2.    |`-repeat 100 count=$>` \n `    bigu={u}` \n `    -if $bigu>0.9` \n `       break` \n `    -fi` \n `-done` \n `-echo "Big U: "$bigu" at count "$count" broke things. :("`|Break on Big U.
| 3.    |`-repeat 100 count=$>` \n `    theu={u}` \n `    -if $theu<0.1` \n `      -echo "The U "$theu": too small to continue..."` \n `      -continue` \n `    -elif $theu>0.9` \n `      -echo "The U "$theu": too big to continue..."` \n `      -continue` \n `    -fi` \n `    -echo  "The U "$theu": is just right!"` \n `    -break` \n `-done` \n `-echo "Done with The U: "$theu" at count "$count". :)"`|Operate only in the comfort zone.
%% ../listmanip/images/ampersand.svg r2dx 50%,5 to_rgb. f. ">k=255*(1-I(x,y)[0]/255);[k,0,0]" expand_x {w/2} i 100%,100%,100%,100% a[-2,-1] y store. ampersand repeat 359 degrees=$> i. $ampersand -rotate. {$degrees},2,1,50%,50% f. ">begin(vec=vector3(1/sqrt(3)));lc="{$degrees+1}";rot(vec,(lc)°)*I" c. 0,255 done o img/ampersand.mp4,24 rm 0 %%
= twirling
## Twirling an 1911 Goudy Ampersand
We set our course upon transforming the 1911 Goudy Bookletter ampersand into a compact disc (approximately), a desire that has been burning in our hearts since early childhood. Odd, that, As the writer's childhood pre-dates compact discs by more than several decades. Ah, anachronisms, but we digress.

At the heart of the script, we "step-and-repeat" an _ampersand_ image onto an _accumulator_ through the ''-blend'' _Negation_ function, a favorite of ours. Details follow.

|-`../listmanip/images/ampersand.svg` \n `-to_rgb.` \n `-fill. 'c==0?255*(1-(i/255)):0'` \n `-blur. 3,1,0` \n `-expand_x {w/2}` \n `-input 100%,100%,100%,100%` \n `-append[-2,-1] y`|Ampersand by [Barry Schwartz](https://www.fontsquirrel.com/fonts/list/foundry/barry-schwartz) who also designed a [nice Goudy font](https://fonts.google.com/specimen/Goudy+Bookletter+1911?query=Barry+Schwartz#standard-styles) to go with it. We:\n    (1) convert the ampersand from a gray to an RGB format,\n    (2) reverse the ampersand, and\n    (3) remove all but the red channel, leaving that slightly blurred.\nThese steps prepare for a neon light ribbons effect, courtesy of the _Negation_ compositing function. We pad the image out to give the ampersand room to twirl around the 50%, 50% image centerpoint.
|`+store[0] ampersand ` \n `-name. accumulator` \n `|A copy of the ampersand automatically serves as the first image in the upcoming "step-and-repeat" exercise. We name it __accumulator__, as it will receive further stamped ampersand copies during the step and repeat. ''-store'' places an off-image-list copy of __ampersand__ into an image storage variable. This image storage variable furnishes fresh copies of the ampersand during the step-and-repeat.
|`-repeat {360/6} step=$>`|We wish to stamp one __ampersand__ every 6°, 60 stampings all told. Why not simplify the math expression — just write 60? Could. We mean, whatever floats peoples' boats, you know? We like the extra documentation; the round-about way signals a certain intent.
|`    rotate={6*($step+1)}`|We compute __rotate__, the rotation, in degrees, that each __ampersand__ copy need to turn before stamping. With each repeat loop, `$step` resolves to the current loop count, so we increment by six degree steps.
|`    -input[0] $ampersand` \n `    -name[0] ampersand`|We fetch a copy of the __ampersand__ image from the off-list named variable, `$ampersand` into which the image was safe-kept upstream from here. Reinsertion uses the semantics of the ''-input'' command. Tagging images via ''-name'' may be over-kill for this small repeat block, but we like the extra documentation that named images affords. Names remind us of purposes and intents.
|`    -rotate[ampersand] {$rotate},2,1,50%,50%` \n `    -normalize[ampersand] 0,255`|We harness the ''-rotate'' command to step the ampersand image around the center of the image. This is a rotation of image pixels, and in principle, there is no operation here that changes pixel intensity, but in practice, a degree of re-interpolation takes place, so pixels may swing to (slight!) negative values, or assume values (slightly!) greater than 255 — however slight, outside the range that unsigned eight bit integers can accommodate. This preoccupation matters because ''-blend'' is a compositor designed for this specific bit depth. Prudence, then, dictates a renormalization to the range in which eight bit unsigned integers reside.
|`    -fill[ampersand] ">` \n `                 wv=vector3(1/sqrt(3));` \n `                 rot(wv,($step)°)*I"` \n\n                ![ampersand](img/ampersand.mp4)|We undertake a rotation of an entirely different character: that of color space vectors to effect color shifts\n\n ''-fill'' takes for a parameter a [Pixel Processor](https://gmic.eu/tutorial/fill.html#math_expressions). The pixel processor operates on every pixel in __ampersand__ and alters its color by a [color space rotation](https://gmic.eu/tutorial/orientation.html#examples). Don't confuse color space rotations with the earlier rotation of the image _per se_. In color space rotation, we model colors as vectors in a three dimensional space, one which has red, green and blue unit axes.\n\nThe color space rotations here steps __ampersand's__ color around the white axis, leaving wholly and nearly unsaturated pixels unchanged, but repointing more staturated colors to new (color space) orientations. With each step, the (initially red) pixels progressively repoint to orange, yellow, green, blue, purple, indigo and then back to red.
|`    -cut[ampersand] 0,255`|Color space can also generate vectors that are out-of-band with respect to unsigned, eight bit image channels. Here, we used ''-cut'' instead of ''-normalize''. What is the difference? With `-cut,` pixel channel values falling below the lower bound are set to that boundary value. Similarly, pixel channel values above the upper bound are set to that value. The upside is that differences among intermediary values do not change, so channel values and the colors they form are undisturbed. The downside is that details conveyed by out of band channel values will be flattened to one or the other boundary and be lost. On the other hand, the G'MIC ''-normalize'' command may be harnessed to adjust minimum and maximum values to match the minimum and maximum values of the destination file format. The channel values stored in the file will be scaled to fit within the lower and upper boundaries which will change tonal and color relationships. See [Images as Data Sets](https://gmic.eu/oldtutorial/images-as-datasets.shtml).
|`    -blend[ampersand,accumulator]` \n `       negation,0.985`| ''-blend'' is a channel compositor designed for gray (G), gray-with-opacity, (GA), red-green-blue (RGB), and RGB-with-opacity (RGBA) imagery with unsigned integer, eight-bit data channels; it hosts about sixty compositing functions and is akin to layer mode operators in [Gimp](https://docs.gimp.org/2.10/en/gimp-concepts-layer-modes.html) and similar paint programs.

===

$$
i^{\prime} = 255 - \lvert (i_{0} + i_{1}) - 255 \rvert
$$

%% (0,25,50,75,100^0,149,0,149,0) -rbf. 100 nm. hill (0,25,50,75,100^149,70,0,70,149) -rbf. 100 nm. vale +display_graph[hill] 450,450,2,0,0,255,0,255,"Image 0 x","Image 0 y" +display_graph[vale] 450,450,2,0,0,255,0,255,"Image 1 x","Image 1 y" -blend[hill] [vale],negation -display_graph[hill] 450,450,2,0,0,255,0,255,"Negation x","Negation y" -mv[0] {$!} -rm[0] %%
===

 __Negation__ takes the absolute of an offsetted sum of two images and differs that with the same offset. The results tend to zero where both images tend to zero or their maximums. The results tend to maximums where the average of the two images is near mid-tone. To those who've developed black and white prints by hand, in some antediluvian era when digital cameras were naught, the results of __Negation__ can imitate [Sabattier's effect](https://en.wikipedia.org/wiki/Sabattier_effect), a.k.a. "(pseudo)solarization" the effect of briefly flashing the developing print with white light about halfway through the process.

Back in the digital realm, we reduce the opacity of the accumulating image ever so slightly. The transparency accumulates; the earlier ampersands fade with respect to the later as the blending repeats.

|-`   -name. accumulator                       `| The surviving image of the blend retains the __ampersand__ name; we rename it back to __accumulator__ in preparation for the next round of blending.
|`    -normalize[accumulator] 0,255`|Prudence, again, dictates a renormalization of the blended images, also in preparation for the next round of blending.
|`-done`|The effect completes.
= listiteration
## List Iteration with ''-local'' … ''-done''

It is a common G'MIC idiom to nest a `-local…-done` block within a `-repeat … -done block`. The construct creates an image list iterator, a form that many G'MIC commands take. In this construct, the argument to `-repeat` is frequently the image list size substitution sequence, `$!`. As `-repeat` iterates from zero to the size of the image list, less one, another substitution sequence `$>` assumes the loop count, incrementing by one with each iteration. This becomes the argument to `-local`, constituting the inner block of the iterator. This induces `-local` to create a _local list_ consisting of just the image indexed by `$>`. The body of the command resides in the `-local`…`-done` block, where the effects of its operations are restricted to the one image on the local list. In the larger scheme of things, the image iterator "visits" each image in turn and during the course of the iteration the effects of its operations are limited to that one image.

# Command Reference

===
"""
gmic -h repeat
"""
===
Updated: 06-June-2021 21:39 UTC Commit: 48c57df87c86
